apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  ports:
    - port: 80
      targetPort: http
  selector:
    app: prometheus
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |-
    scrape_configs:
    - job_name: 'node'
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    
      kubernetes_sd_configs:
      - api_servers:
        - 'https://10.10.10.1'
        in_cluster: true
        role: node

      relabel_configs:
      - source_labels: [__address__]
        action: replace
        target_label: __address__
        regex: (.+)(?::\d+)
        replacement: $1:9100

    - job_name: 'etcd'
      tls_config:
        ca_file: /etc/host-ssl/5pi-ca.pem
        cert_file: /etc/host-ssl/server.pem
        key_file: /etc/host-ssl/server-key.pem
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    
      kubernetes_sd_configs:
      - api_servers:
        - 'https://10.10.10.1'
        in_cluster: true
        role: node

      relabel_configs:
      - target_label: __scheme__
        action: replace
        replacement: https
      - source_labels: [__address__]
        action: replace
        target_label: __address__
        regex: (.+)(?::\d+)
        replacement: $1:2379

    - job_name: 'kubernetes-cluster'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    
      kubernetes_sd_configs:
      - api_servers:
        - 'https://10.10.10.1'
        in_cluster: true
        role: apiserver
   
    - job_name: 'kubernetes-nodes'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    
      kubernetes_sd_configs:
      - api_servers:
        - 'https://10.10.10.1'
        in_cluster: true
        role: node
    
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
    
    # Scrape config for service endpoints.
    #
    # The relabeling allows the actual service scrape endpoint to be configured
    # via the following annotations:
    #
    # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
    # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
    # to set this to `https` & most likely set the `tls_config` of the scrape config.
    # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
    # * `prometheus.io/port`: If the metrics are exposed on a different port to the
    # service then set this appropriately.
    - job_name: 'kubernetes-service-endpoints'
    
      kubernetes_sd_configs:
      - api_servers:
        - 'https://10.10.10.1'
        in_cluster: true
        role: endpoint
    
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: (.+)(?::\d+);(\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_service_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: prometheus
  labels:
    app: prometheus
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - image: quay.io/prometheus/prometheus
        name: prometheus
        resources:
          limits:
            memory: 350Mi
          requests:
            cpu: 500m
            memory: 350Mi
        ports:
        - name: http
          containerPort: 9090
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus
        - name: host-ssl
          mountPath: /etc/host-ssl
        - name: data
          mountPath: /prometheus
        args:
        - -config.file=/etc/prometheus/prometheus.yml
        - -storage.local.path=/prometheus
        - -web.console.libraries=/usr/share/prometheus/console_libraries
        - -web.console.templates=/usr/share/prometheus/consoles
        - -storage.local.memory-chunks=175000                           # ~175MB for chunks
        - -storage.local.max-chunks-to-persist=87500                    # 50% of memory chunks
        - -storage.local.chunk-encoding-version=2                       # higher CPU, less mem usage
        - -storage.local.index-cache-size.fingerprint-to-metric=5242880 # 1/2 default cache size
        - -storage.local.index-cache-size.fingerprint-to-timerange=2621440
        - -storage.local.index-cache-size.label-name-to-label-values=5242880
        - -storage.local.index-cache-size.label-pair-to-fingerprints=10485760
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-config
      - name: host-ssl
        hostPath:
          path: /etc/ssl
      - name: data
        flexVolume:
          driver: "5pi.de/do-volume"
          fsType: "ext4"
          options:
            volume: "prometheus"
